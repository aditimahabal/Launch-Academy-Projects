{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"weather nfl","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOY21u3djQL+2XLcL9u+m5n"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"SCq9StypyUT7","colab_type":"code","colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":72},"executionInfo":{"status":"ok","timestamp":1592430113679,"user_tz":240,"elapsed":18147,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"9dc1e3b0-10ba-4600-f00a-691608074085"},"source":["from google.colab import files\n","uploaded = files.upload()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-e79d2af2-eaa0-43f8-8051-4bf145e970fa\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-e79d2af2-eaa0-43f8-8051-4bf145e970fa\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving weather_20131231.csv to weather_20131231.csv\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"-RvlOdQQyivX","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":71},"executionInfo":{"status":"ok","timestamp":1592430114494,"user_tz":240,"elapsed":18943,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"cbcce448-b55c-45d3-b742-313b390b56b1"},"source":["#importing everything\n","from numpy import genfromtxt\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn; seaborn.set_style('whitegrid') \n","%matplotlib inline\n","import seaborn as sns\n","from sklearn.linear_model import LinearRegression\n","from sklearn import metrics\n","\n","from sklearn.datasets import make_classification\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import train_test_split\n","\n","from sklearn.metrics import accuracy_score\n","from IPython.display import display, HTML\n","\n","from sklearn.model_selection import cross_val_score\n","from sklearn.ensemble import AdaBoostClassifier"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"CFF3t8_4O1g7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":374},"executionInfo":{"status":"ok","timestamp":1592430141424,"user_tz":240,"elapsed":328,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"d98a23a0-e83e-47b6-9261-34f5c7f438c3"},"source":["weather2 = pd.read_csv('weather_20131231.csv')\n","weather2.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>home_team</th>\n","      <th>home_score</th>\n","      <th>away_team</th>\n","      <th>away_score</th>\n","      <th>temperature</th>\n","      <th>wind_chill</th>\n","      <th>humidity</th>\n","      <th>wind_mph</th>\n","      <th>weather</th>\n","      <th>date</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>196009230ram</td>\n","      <td>Los Angeles Rams</td>\n","      <td>21</td>\n","      <td>St. Louis Cardinals</td>\n","      <td>43</td>\n","      <td>66</td>\n","      <td>NaN</td>\n","      <td>78%</td>\n","      <td>8.0</td>\n","      <td>66 degrees- relative humidity 78%- wind 8 mph</td>\n","      <td>9/23/1960</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>196009240dal</td>\n","      <td>Dallas Cowboys</td>\n","      <td>28</td>\n","      <td>Pittsburgh Steelers</td>\n","      <td>35</td>\n","      <td>72</td>\n","      <td>NaN</td>\n","      <td>80%</td>\n","      <td>16.0</td>\n","      <td>72 degrees- relative humidity 80%- wind 16 mph</td>\n","      <td>9/24/1960</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>196009250gnb</td>\n","      <td>Green Bay Packers</td>\n","      <td>14</td>\n","      <td>Chicago Bears</td>\n","      <td>17</td>\n","      <td>60</td>\n","      <td>NaN</td>\n","      <td>76%</td>\n","      <td>13.0</td>\n","      <td>60 degrees- relative humidity 76%- wind 13 mph</td>\n","      <td>9/25/1960</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>196009250sfo</td>\n","      <td>San Francisco 49ers</td>\n","      <td>19</td>\n","      <td>New York Giants</td>\n","      <td>21</td>\n","      <td>72</td>\n","      <td>NaN</td>\n","      <td>44%</td>\n","      <td>10.0</td>\n","      <td>72 degrees- relative humidity 44%- wind 10 mph</td>\n","      <td>9/25/1960</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>196009250clt</td>\n","      <td>Baltimore Colts</td>\n","      <td>20</td>\n","      <td>Washington Redskins</td>\n","      <td>0</td>\n","      <td>62</td>\n","      <td>NaN</td>\n","      <td>80%</td>\n","      <td>9.0</td>\n","      <td>62 degrees- relative humidity 80%- wind 9 mph</td>\n","      <td>9/25/1960</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["             id  ...       date\n","0  196009230ram  ...  9/23/1960\n","1  196009240dal  ...  9/24/1960\n","2  196009250gnb  ...  9/25/1960\n","3  196009250sfo  ...  9/25/1960\n","4  196009250clt  ...  9/25/1960\n","\n","[5 rows x 11 columns]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"KeOA_e19yr04","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":374},"executionInfo":{"status":"ok","timestamp":1592430135544,"user_tz":240,"elapsed":366,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"202d6a19-84dc-42c2-e9d7-0ad2e13ff040"},"source":["#Some basic cleaning \n","weather = weather2.drop(['id', 'weather'],1) #dropping variables unecessary to analysis\n","weather['humidity'] = weather.humidity.str.replace('%', '', regex=True) #cleaning that humidity variable\n","weather = weather.dropna() #removing the many NaN values\n","weather['humidity'] = weather['humidity'].astype(int) \n","weather2.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>home_team</th>\n","      <th>home_score</th>\n","      <th>away_team</th>\n","      <th>away_score</th>\n","      <th>temperature</th>\n","      <th>wind_chill</th>\n","      <th>humidity</th>\n","      <th>wind_mph</th>\n","      <th>weather</th>\n","      <th>date</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>196009230ram</td>\n","      <td>Los Angeles Rams</td>\n","      <td>21</td>\n","      <td>St. Louis Cardinals</td>\n","      <td>43</td>\n","      <td>66</td>\n","      <td>NaN</td>\n","      <td>78%</td>\n","      <td>8.0</td>\n","      <td>66 degrees- relative humidity 78%- wind 8 mph</td>\n","      <td>9/23/1960</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>196009240dal</td>\n","      <td>Dallas Cowboys</td>\n","      <td>28</td>\n","      <td>Pittsburgh Steelers</td>\n","      <td>35</td>\n","      <td>72</td>\n","      <td>NaN</td>\n","      <td>80%</td>\n","      <td>16.0</td>\n","      <td>72 degrees- relative humidity 80%- wind 16 mph</td>\n","      <td>9/24/1960</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>196009250gnb</td>\n","      <td>Green Bay Packers</td>\n","      <td>14</td>\n","      <td>Chicago Bears</td>\n","      <td>17</td>\n","      <td>60</td>\n","      <td>NaN</td>\n","      <td>76%</td>\n","      <td>13.0</td>\n","      <td>60 degrees- relative humidity 76%- wind 13 mph</td>\n","      <td>9/25/1960</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>196009250sfo</td>\n","      <td>San Francisco 49ers</td>\n","      <td>19</td>\n","      <td>New York Giants</td>\n","      <td>21</td>\n","      <td>72</td>\n","      <td>NaN</td>\n","      <td>44%</td>\n","      <td>10.0</td>\n","      <td>72 degrees- relative humidity 44%- wind 10 mph</td>\n","      <td>9/25/1960</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>196009250clt</td>\n","      <td>Baltimore Colts</td>\n","      <td>20</td>\n","      <td>Washington Redskins</td>\n","      <td>0</td>\n","      <td>62</td>\n","      <td>NaN</td>\n","      <td>80%</td>\n","      <td>9.0</td>\n","      <td>62 degrees- relative humidity 80%- wind 9 mph</td>\n","      <td>9/25/1960</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["             id  ...       date\n","0  196009230ram  ...  9/23/1960\n","1  196009240dal  ...  9/24/1960\n","2  196009250gnb  ...  9/25/1960\n","3  196009250sfo  ...  9/25/1960\n","4  196009250clt  ...  9/25/1960\n","\n","[5 rows x 11 columns]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"vqAyMBbmzCyN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1590584626536,"user_tz":240,"elapsed":1846,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"3a51fc86-ccfc-47eb-c18b-f7253a2298e9"},"source":["#Cleaning the data/adding columns --> keeping what is needed\n","\n","#Creating winner and team variables to keep count of who won, and away or home\n","weather['winner']=\"\"\n","weather['team']=\"\"\n","for i in range(len(weather)):\n","  if weather.iloc[i,1]>=weather.iloc[i,3]:\n","    weather.iloc[i,9] = weather.iloc[i,0]\n","    weather.iloc[i,10] = \"Home\"\n","  else:\n","    weather.iloc[i,9] = weather.iloc[i,2]\n","    weather.iloc[i,10] = \"Away\"\n","\n","weather.head()\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>home_team</th>\n","      <th>home_score</th>\n","      <th>away_team</th>\n","      <th>away_score</th>\n","      <th>temperature</th>\n","      <th>wind_chill</th>\n","      <th>humidity</th>\n","      <th>wind_mph</th>\n","      <th>date</th>\n","      <th>winner</th>\n","      <th>team</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>37</th>\n","      <td>Cleveland Browns</td>\n","      <td>13</td>\n","      <td>New York Giants</td>\n","      <td>17</td>\n","      <td>34</td>\n","      <td>25.0</td>\n","      <td>91</td>\n","      <td>13.0</td>\n","      <td>11/6/1960</td>\n","      <td>New York Giants</td>\n","      <td>Away</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>Detroit Lions</td>\n","      <td>23</td>\n","      <td>Green Bay Packers</td>\n","      <td>10</td>\n","      <td>36</td>\n","      <td>29.0</td>\n","      <td>55</td>\n","      <td>10.0</td>\n","      <td>11/24/1960</td>\n","      <td>Detroit Lions</td>\n","      <td>Home</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>Cleveland Browns</td>\n","      <td>42</td>\n","      <td>Chicago Bears</td>\n","      <td>0</td>\n","      <td>24</td>\n","      <td>12.0</td>\n","      <td>76</td>\n","      <td>15.0</td>\n","      <td>12/11/1960</td>\n","      <td>Cleveland Browns</td>\n","      <td>Home</td>\n","    </tr>\n","    <tr>\n","      <th>69</th>\n","      <td>Pittsburgh Steelers</td>\n","      <td>27</td>\n","      <td>Philadelphia Eagles</td>\n","      <td>21</td>\n","      <td>28</td>\n","      <td>18.0</td>\n","      <td>76</td>\n","      <td>12.0</td>\n","      <td>12/11/1960</td>\n","      <td>Pittsburgh Steelers</td>\n","      <td>Home</td>\n","    </tr>\n","    <tr>\n","      <th>71</th>\n","      <td>Detroit Lions</td>\n","      <td>23</td>\n","      <td>Dallas Cowboys</td>\n","      <td>14</td>\n","      <td>21</td>\n","      <td>6.0</td>\n","      <td>62</td>\n","      <td>16.0</td>\n","      <td>12/11/1960</td>\n","      <td>Detroit Lions</td>\n","      <td>Home</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              home_team  home_score  ...               winner  team\n","37     Cleveland Browns          13  ...      New York Giants  Away\n","54        Detroit Lions          23  ...        Detroit Lions  Home\n","67     Cleveland Browns          42  ...     Cleveland Browns  Home\n","69  Pittsburgh Steelers          27  ...  Pittsburgh Steelers  Home\n","71        Detroit Lions          23  ...        Detroit Lions  Home\n","\n","[5 rows x 11 columns]"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"FkH_D1rn1254","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":272},"executionInfo":{"status":"ok","timestamp":1590584632242,"user_tz":240,"elapsed":1159,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"64c04dbb-5c30-4d5b-ec10-08fa0cf48463"},"source":["#Creating a binary score column to use in logistic regression\n","weather['score']=\"\"\n","for i in range(len(weather)):\n","  if weather.iloc[i,10]==\"Away\":\n","    weather.iloc[i,11]=0\n","  else:\n","    weather.iloc[i,11]=1\n","\n","weather.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>home_team</th>\n","      <th>home_score</th>\n","      <th>away_team</th>\n","      <th>away_score</th>\n","      <th>temperature</th>\n","      <th>wind_chill</th>\n","      <th>humidity</th>\n","      <th>wind_mph</th>\n","      <th>date</th>\n","      <th>winner</th>\n","      <th>team</th>\n","      <th>score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>37</th>\n","      <td>Cleveland Browns</td>\n","      <td>13</td>\n","      <td>New York Giants</td>\n","      <td>17</td>\n","      <td>34</td>\n","      <td>25.0</td>\n","      <td>91</td>\n","      <td>13.0</td>\n","      <td>11/6/1960</td>\n","      <td>New York Giants</td>\n","      <td>Away</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>Detroit Lions</td>\n","      <td>23</td>\n","      <td>Green Bay Packers</td>\n","      <td>10</td>\n","      <td>36</td>\n","      <td>29.0</td>\n","      <td>55</td>\n","      <td>10.0</td>\n","      <td>11/24/1960</td>\n","      <td>Detroit Lions</td>\n","      <td>Home</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>Cleveland Browns</td>\n","      <td>42</td>\n","      <td>Chicago Bears</td>\n","      <td>0</td>\n","      <td>24</td>\n","      <td>12.0</td>\n","      <td>76</td>\n","      <td>15.0</td>\n","      <td>12/11/1960</td>\n","      <td>Cleveland Browns</td>\n","      <td>Home</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>69</th>\n","      <td>Pittsburgh Steelers</td>\n","      <td>27</td>\n","      <td>Philadelphia Eagles</td>\n","      <td>21</td>\n","      <td>28</td>\n","      <td>18.0</td>\n","      <td>76</td>\n","      <td>12.0</td>\n","      <td>12/11/1960</td>\n","      <td>Pittsburgh Steelers</td>\n","      <td>Home</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>71</th>\n","      <td>Detroit Lions</td>\n","      <td>23</td>\n","      <td>Dallas Cowboys</td>\n","      <td>14</td>\n","      <td>21</td>\n","      <td>6.0</td>\n","      <td>62</td>\n","      <td>16.0</td>\n","      <td>12/11/1960</td>\n","      <td>Detroit Lions</td>\n","      <td>Home</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              home_team  home_score  ...  team  score\n","37     Cleveland Browns          13  ...  Away      0\n","54        Detroit Lions          23  ...  Home      1\n","67     Cleveland Browns          42  ...  Home      1\n","69  Pittsburgh Steelers          27  ...  Home      1\n","71        Detroit Lions          23  ...  Home      1\n","\n","[5 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"Q3bv3BdSTq4r","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":326},"executionInfo":{"status":"ok","timestamp":1590591439367,"user_tz":240,"elapsed":1382,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"4d024a46-f00d-4eb7-c597-62bb16a23fff"},"source":["#Creating a winning score column to use in visualizations\n","weather['winning score']=\"\"\n","for i in range(len(weather)):\n","  if weather.iloc[i,1]>=weather.iloc[i,3]:\n","    weather.iloc[i,12] = weather.iloc[i,1]\n","  else:\n","    weather.iloc[i,12] = weather.iloc[i,3]\n","weather.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>home_team</th>\n","      <th>home_score</th>\n","      <th>away_team</th>\n","      <th>away_score</th>\n","      <th>temperature</th>\n","      <th>wind_chill</th>\n","      <th>humidity</th>\n","      <th>wind_mph</th>\n","      <th>date</th>\n","      <th>winner</th>\n","      <th>team</th>\n","      <th>score</th>\n","      <th>winning score</th>\n","      <th>above 40</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>37</th>\n","      <td>Cleveland Browns</td>\n","      <td>13</td>\n","      <td>New York Giants</td>\n","      <td>17</td>\n","      <td>34</td>\n","      <td>25.0</td>\n","      <td>91</td>\n","      <td>13.0</td>\n","      <td>11/6/1960</td>\n","      <td>New York Giants</td>\n","      <td>Away</td>\n","      <td>0</td>\n","      <td>17</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>Detroit Lions</td>\n","      <td>23</td>\n","      <td>Green Bay Packers</td>\n","      <td>10</td>\n","      <td>36</td>\n","      <td>29.0</td>\n","      <td>55</td>\n","      <td>10.0</td>\n","      <td>11/24/1960</td>\n","      <td>Detroit Lions</td>\n","      <td>Home</td>\n","      <td>1</td>\n","      <td>23</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>Cleveland Browns</td>\n","      <td>42</td>\n","      <td>Chicago Bears</td>\n","      <td>0</td>\n","      <td>24</td>\n","      <td>12.0</td>\n","      <td>76</td>\n","      <td>15.0</td>\n","      <td>12/11/1960</td>\n","      <td>Cleveland Browns</td>\n","      <td>Home</td>\n","      <td>1</td>\n","      <td>42</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>69</th>\n","      <td>Pittsburgh Steelers</td>\n","      <td>27</td>\n","      <td>Philadelphia Eagles</td>\n","      <td>21</td>\n","      <td>28</td>\n","      <td>18.0</td>\n","      <td>76</td>\n","      <td>12.0</td>\n","      <td>12/11/1960</td>\n","      <td>Pittsburgh Steelers</td>\n","      <td>Home</td>\n","      <td>1</td>\n","      <td>27</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>71</th>\n","      <td>Detroit Lions</td>\n","      <td>23</td>\n","      <td>Dallas Cowboys</td>\n","      <td>14</td>\n","      <td>21</td>\n","      <td>6.0</td>\n","      <td>62</td>\n","      <td>16.0</td>\n","      <td>12/11/1960</td>\n","      <td>Detroit Lions</td>\n","      <td>Home</td>\n","      <td>1</td>\n","      <td>23</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              home_team  home_score  ... winning score  above 40\n","37     Cleveland Browns          13  ...            17         0\n","54        Detroit Lions          23  ...            23         0\n","67     Cleveland Browns          42  ...            42         1\n","69  Pittsburgh Steelers          27  ...            27         0\n","71        Detroit Lions          23  ...            23         0\n","\n","[5 rows x 14 columns]"]},"metadata":{"tags":[]},"execution_count":186}]},{"cell_type":"code","metadata":{"id":"XRaC5Q9Is1m9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":326},"executionInfo":{"status":"ok","timestamp":1590584645411,"user_tz":240,"elapsed":1184,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"586104b1-9a73-4bf3-ba03-e8ca872f12bd"},"source":["weather['above 40']=\"\"\n","for i in range(len(weather)):\n","  if weather.iloc[i,1] >40:\n","    weather.iloc[i,13] = \"1\"\n","  elif weather.iloc[i,3]>40:\n","    weather.iloc[i,13] = \"1\"\n","  else:\n","    weather.iloc[i,13] = \"0\"\n","\n","weather.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>home_team</th>\n","      <th>home_score</th>\n","      <th>away_team</th>\n","      <th>away_score</th>\n","      <th>temperature</th>\n","      <th>wind_chill</th>\n","      <th>humidity</th>\n","      <th>wind_mph</th>\n","      <th>date</th>\n","      <th>winner</th>\n","      <th>team</th>\n","      <th>score</th>\n","      <th>winning score</th>\n","      <th>above 40</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>37</th>\n","      <td>Cleveland Browns</td>\n","      <td>13</td>\n","      <td>New York Giants</td>\n","      <td>17</td>\n","      <td>34</td>\n","      <td>25.0</td>\n","      <td>91</td>\n","      <td>13.0</td>\n","      <td>11/6/1960</td>\n","      <td>New York Giants</td>\n","      <td>Away</td>\n","      <td>0</td>\n","      <td>17</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>Detroit Lions</td>\n","      <td>23</td>\n","      <td>Green Bay Packers</td>\n","      <td>10</td>\n","      <td>36</td>\n","      <td>29.0</td>\n","      <td>55</td>\n","      <td>10.0</td>\n","      <td>11/24/1960</td>\n","      <td>Detroit Lions</td>\n","      <td>Home</td>\n","      <td>1</td>\n","      <td>23</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>Cleveland Browns</td>\n","      <td>42</td>\n","      <td>Chicago Bears</td>\n","      <td>0</td>\n","      <td>24</td>\n","      <td>12.0</td>\n","      <td>76</td>\n","      <td>15.0</td>\n","      <td>12/11/1960</td>\n","      <td>Cleveland Browns</td>\n","      <td>Home</td>\n","      <td>1</td>\n","      <td>42</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>69</th>\n","      <td>Pittsburgh Steelers</td>\n","      <td>27</td>\n","      <td>Philadelphia Eagles</td>\n","      <td>21</td>\n","      <td>28</td>\n","      <td>18.0</td>\n","      <td>76</td>\n","      <td>12.0</td>\n","      <td>12/11/1960</td>\n","      <td>Pittsburgh Steelers</td>\n","      <td>Home</td>\n","      <td>1</td>\n","      <td>27</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>71</th>\n","      <td>Detroit Lions</td>\n","      <td>23</td>\n","      <td>Dallas Cowboys</td>\n","      <td>14</td>\n","      <td>21</td>\n","      <td>6.0</td>\n","      <td>62</td>\n","      <td>16.0</td>\n","      <td>12/11/1960</td>\n","      <td>Detroit Lions</td>\n","      <td>Home</td>\n","      <td>1</td>\n","      <td>23</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              home_team  home_score  ... winning score  above 40\n","37     Cleveland Browns          13  ...            17         0\n","54        Detroit Lions          23  ...            23         0\n","67     Cleveland Browns          42  ...            42         1\n","69  Pittsburgh Steelers          27  ...            27         0\n","71        Detroit Lions          23  ...            23         0\n","\n","[5 rows x 14 columns]"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"Od0VcXndUPG8","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":414},"executionInfo":{"status":"ok","timestamp":1590591487704,"user_tz":240,"elapsed":2727,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"6e0e7c7d-9bc2-4a0c-b066-3662f8854b10"},"source":["#Looking at relationships between the weather variables and how high/low scores went\n","#Seeing if using a smaller/more recent sample gives a more clear trend\n","weatherLatest = weather.tail(100)\n","sns.pairplot(weatherLatest, x_vars=['temperature','humidity','wind_mph'], y_vars='winning score', hue='team')\n","sns.pairplot(weather, x_vars=['temperature','humidity','wind_mph'], y_vars='winning score')\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.PairGrid at 0x7f60da51f978>"]},"metadata":{"tags":[]},"execution_count":188},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 605.25x180 with 3 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 540x180 with 3 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"50iU1UdIiX9z","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":393},"executionInfo":{"status":"ok","timestamp":1590589757203,"user_tz":240,"elapsed":1743,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"344a4857-d9dd-4053-a8a5-7b7aa3865528"},"source":["chart = sns.barplot(x = weatherLatest.winner, y=weatherLatest['winning score'], hue=weatherLatest.team)\n","chart.set_xticklabels(chart.get_xticklabels(), rotation=90)\n","chart"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f60dad38c88>"]},"metadata":{"tags":[]},"execution_count":181},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"iIVa1Z-RiTRc","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1590589735413,"user_tz":240,"elapsed":701,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"f02e9501-d436-46d3-f445-8964e255fbb3"},"source":["chart2 = sns.scatterplot(x = weatherLatest['home_score'], y=weatherLatest['away_score'], hue=weatherLatest.team)\n","chart2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f60dc524f28>"]},"metadata":{"tags":[]},"execution_count":180},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"AlAzjyA4O9dI","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":275},"executionInfo":{"status":"ok","timestamp":1590585426501,"user_tz":240,"elapsed":620,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"e8c3f415-66a6-4bce-a8ae-9e42bc310aca"},"source":["#first random forest, predicting home/away win\n","Xrf = weather[['temperature', 'wind_chill', 'humidity', 'wind_mph', 'winning score']]\n","yrf = weather['score']\n","yrf=yrf.astype('int')\n","\n","xrf_train, xrf_test, yrf_train, yrf_test = train_test_split(Xrf, yrf, test_size=0.2)\n","\n","forest = RandomForestClassifier()\n","forest.fit(xrf_train, yrf_train)\n","\n","predict_yrf = forest.predict(xrf_test)\n","\n","importance_df = pd.DataFrame({'Importance': forest.feature_importances_}, index = xrf_train.columns).sort_values('Importance', ascending = False)\n","print(importance_df)\n","pd.crosstab(yrf_test, predict_yrf, rownames=['Actual'], colnames = ['Predicted:'], margins = True)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["               Importance\n","humidity         0.257130\n","winning score    0.228942\n","wind_mph         0.182387\n","temperature      0.174364\n","wind_chill       0.157176\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>Predicted:</th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>All</th>\n","    </tr>\n","    <tr>\n","      <th>Actual</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>29</td>\n","      <td>81</td>\n","      <td>110</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>54</td>\n","      <td>149</td>\n","      <td>203</td>\n","    </tr>\n","    <tr>\n","      <th>All</th>\n","      <td>83</td>\n","      <td>230</td>\n","      <td>313</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["Predicted:   0    1  All\n","Actual                  \n","0           29   81  110\n","1           54  149  203\n","All         83  230  313"]},"metadata":{"tags":[]},"execution_count":49}]},{"cell_type":"code","metadata":{"id":"L0tlWKXpQKVn","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"executionInfo":{"status":"ok","timestamp":1590585434517,"user_tz":240,"elapsed":364,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"451165ca-e916-4dca-a4a0-f33a15048905"},"source":["print(\"Random Forest Model Score:\",forest.score(xrf_test, yrf_test))\n","\n","from sklearn import metrics\n","\n","print(\"Accuracy:\",metrics.accuracy_score(yrf_test, predict_yrf))\n","print(\"Precision:\",metrics.precision_score(yrf_test, predict_yrf))\n","print(\"Recall:\",metrics.recall_score(yrf_test, predict_yrf))\n","print(\"F1:\", metrics.f1_score(yrf_test, predict_yrf))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random Forest Model Score: 0.5686900958466453\n","Accuracy: 0.5686900958466453\n","Precision: 0.6478260869565218\n","Recall: 0.7339901477832512\n","F1: 0.6882217090069284\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_kfvI0VaQkzW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":275},"executionInfo":{"status":"ok","timestamp":1590585441632,"user_tz":240,"elapsed":603,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"804138b3-9786-4264-8b3e-0285ef3ba8d1"},"source":["#second random forest, predicting abv/below 40 win\n","Xrf2 = weather[['temperature', 'wind_chill', 'humidity', 'wind_mph', 'score']]\n","yrf2 = weather['above 40']\n","yrf2=yrf2.astype('int')\n","\n","xrf2_train, xrf2_test, yrf2_train, yrf2_test = train_test_split(Xrf2, yrf2, test_size=0.2)\n","\n","forest2 = RandomForestClassifier()\n","forest2.fit(xrf2_train, yrf2_train)\n","\n","predict_yrf2 = forest.predict(xrf2_test)\n","\n","importance_df2 = pd.DataFrame({'Importance': forest2.feature_importances_}, index = xrf2_train.columns).sort_values('Importance', ascending = False)\n","print(importance_df2)\n","pd.crosstab(yrf2_test, predict_yrf2, rownames=['Actual'], colnames = ['Predicted:'], margins = True)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["             Importance\n","humidity       0.375252\n","wind_mph       0.209053\n","temperature    0.200804\n","wind_chill     0.174150\n","score          0.040740\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>Predicted:</th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>All</th>\n","    </tr>\n","    <tr>\n","      <th>Actual</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>90</td>\n","      <td>202</td>\n","      <td>292</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>19</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>All</th>\n","      <td>92</td>\n","      <td>221</td>\n","      <td>313</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["Predicted:   0    1  All\n","Actual                  \n","0           90  202  292\n","1            2   19   21\n","All         92  221  313"]},"metadata":{"tags":[]},"execution_count":52}]},{"cell_type":"code","metadata":{"id":"POk7fb01Q1np","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"executionInfo":{"status":"ok","timestamp":1590585444236,"user_tz":240,"elapsed":334,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"0639bd37-77f2-4cb5-8dc4-847816005fde"},"source":["print(\"Random Forest Model Score:\",forest2.score(xrf2_test, yrf2_test))\n","\n","from sklearn import metrics\n","\n","print(\"Accuracy:\",metrics.accuracy_score(yrf2_test, predict_yrf2))\n","print(\"Precision:\",metrics.precision_score(yrf2_test, predict_yrf2))\n","print(\"Recall:\",metrics.recall_score(yrf2_test, predict_yrf2))\n","print(\"F1:\", metrics.f1_score(yrf2_test, predict_yrf2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random Forest Model Score: 0.9233226837060703\n","Accuracy: 0.34824281150159747\n","Precision: 0.08597285067873303\n","Recall: 0.9047619047619048\n","F1: 0.15702479338842976\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TZoL71kZSEsI","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":85},"executionInfo":{"status":"ok","timestamp":1590585799644,"user_tz":240,"elapsed":1540,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"119a7a9a-07e6-4209-854c-58b59be9b21f"},"source":["#using an ada classifier - home/away\n","clf = AdaBoostClassifier(n_estimators=200, algorithm= 'SAMME.R')\n","clf.fit(xrf_train, yrf_train)\n","\n","print(clf.score(xrf_test, yrf_test))\n","\n","#using a gradient boosting classifier\n","from sklearn.ensemble import GradientBoostingClassifier\n","clf2 = GradientBoostingClassifier(learning_rate=.03,\n","max_depth=3, n_estimators=100).fit(xrf_train, yrf_train)\n","\n","print(clf2.score(xrf_test, yrf_test))\n","\n","\n","#using an ada classifier pt.2 - above 40/below\n","clf3 = AdaBoostClassifier(n_estimators=200, algorithm= 'SAMME.R')\n","clf3.fit(xrf2_train, yrf2_train)\n","\n","print(clf3.score(xrf2_test, yrf2_test))\n","\n","#using a gradient boosting classifier pt.2\n","from sklearn.ensemble import GradientBoostingClassifier\n","clf4 = GradientBoostingClassifier(learning_rate=.03,\n","max_depth=3, n_estimators=100).fit(xrf2_train, yrf2_train)\n","\n","print(clf4.score(xrf2_test, yrf2_test))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0.6198083067092651\n","0.6293929712460063\n","0.9297124600638977\n","0.9329073482428115\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WZ15QmytndtC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"status":"ok","timestamp":1590587122894,"user_tz":240,"elapsed":267,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"c667581f-0a3a-4f5b-f74b-1c61504bc0fa"},"source":["#old logistical regression -- home/away\n","weather4 = weather\n","weather4\n","\n","weather4 = weather.drop(['home_team','home_score', 'wind_mph',\t'date','away_team','away_score',\t'winner',\t'team', 'temperature', 'winning score', 'above 40'],1)\n","weather4.head()\n","\n","wthr4 = pd.DataFrame.to_numpy(weather4)\n","wthr4"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[25.0, 91, 0],\n","       [29.0, 55, 1],\n","       [12.0, 76, 1],\n","       ...,\n","       [0.0, 100, 1],\n","       [0.0, 16, 0],\n","       [0.0, 84, 0]], dtype=object)"]},"metadata":{"tags":[]},"execution_count":87}]},{"cell_type":"code","metadata":{"id":"NlgQ2_lv6Fl6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1590587124817,"user_tz":240,"elapsed":330,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"535af046-007f-4855-dd00-e61461101325"},"source":["print(wthr4.shape)\n","X4 = wthr4[:,0:2]\n","y4 = wthr4[:,2:]\n","y4=y4.astype('int')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1562, 3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bkymvdeS6QS4","colab_type":"code","colab":{}},"source":["split4 = int(0.9*len(wthr4))\n","\n","y4_train = y4[:split4]\n","y4_test = y4[split4:]\n","x4_train = X4[:split4]\n","x4_test = X4[split4:]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-IKYPNrr6Z9Q","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"executionInfo":{"status":"ok","timestamp":1590587126923,"user_tz":240,"elapsed":360,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"9893430f-7d57-4767-e922-b5ef30ca1b32"},"source":["y4_train = y4_train.ravel()\n","y4_test = y4_test.ravel() #making it flat, 1x0 instead of 0x1\n","\n","print(wthr4.shape)\n","print(x4_train.shape)\n","print(x4_train[0])\n","\n","print(y4_train.shape)\n","print(y4_train[0])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1562, 3)\n","(1405, 2)\n","[25.0 91]\n","(1405,)\n","0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AjJ1Xm9p6fm4","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"executionInfo":{"status":"ok","timestamp":1590587128716,"user_tz":240,"elapsed":537,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"fb8584d1-54ce-4482-f7d5-78fd1ab4f466"},"source":["from sklearn.linear_model import LogisticRegression\n","regr1 = LogisticRegression(solver='lbfgs' ,fit_intercept=True)\n","\n","regr1.fit(x4_train, y4_train)\n","print(\"Test accuracy:\")\n","print(regr1.score(x4_test,y4_test))\n","print(\"Vector with coefficient values for theta_1, theta_2\")\n","print(\"theta_0:\",regr1.intercept_[0],\"theta_1, theta_2: = \",regr1.coef_[0])\n","\n","\n","print(\"Mean prediction accuracy is: \",regr1.score(X4,y4))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Test accuracy:\n","0.6242038216560509\n","Vector with coefficient values for theta_1, theta_2\n","theta_0: 0.45273368791380514 theta_1, theta_2: =  [-0.01064791  0.00410866]\n","Mean prediction accuracy is:  0.6261203585147247\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wMUSSnacq7TK","colab_type":"text"},"source":["## BREAK"]},{"cell_type":"code","metadata":{"id":"iqyKh0-h0T3W","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"status":"ok","timestamp":1590587092120,"user_tz":240,"elapsed":405,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"848cf9e6-fea3-4760-e102-1f9682121d45"},"source":["#another regression --> abv 40 /below\n","weather3 = weather\n","weather3\n","weather3 = weather3.drop(['home_team','home_score','date','wind_mph',\t'away_team','away_score',\t'winner',\t'team', 'temperature', 'winning score', 'score' ],1)\n","wthr3 = pd.DataFrame.to_numpy(weather3)\n","wthr3"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[25.0, 91, '0'],\n","       [29.0, 55, '0'],\n","       [12.0, 76, '1'],\n","       ...,\n","       [0.0, 100, '0'],\n","       [0.0, 16, '0'],\n","       [0.0, 84, '0']], dtype=object)"]},"metadata":{"tags":[]},"execution_count":82}]},{"cell_type":"code","metadata":{"id":"T_LqVVlansRh","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1590587149112,"user_tz":240,"elapsed":617,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"8548a621-4683-4b26-d0b3-35dbe003fcd5"},"source":["print(wthr3.shape)\n","X3 = wthr3[:,0:2]\n","y3 = wthr3[:,2:]\n","y3=y3.astype('int')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1562, 3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ZttxC_6JnxdM","colab_type":"code","colab":{}},"source":["split3 = int(0.9*len(wthr3))\n","\n","y3_train = y3[:split3]\n","y3_test = y3[split3:]\n","x3_train = X3[:split3]\n","x3_test = X3[split3:]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pjB_-N57n5r6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"executionInfo":{"status":"ok","timestamp":1590587152615,"user_tz":240,"elapsed":659,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"7865ad49-6f2b-4a00-dc99-5ad4175a534a"},"source":["y3_train = y3_train.ravel()\n","y3_test = y3_test.ravel() #making it flat, 1x0 instead of 0x1\n","\n","print(wthr3.shape)\n","print(x3_train.shape)\n","print(x3_train[0])\n","\n","print(y3_train.shape)\n","print(y3_train[0])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1562, 3)\n","(1405, 2)\n","[25.0 91]\n","(1405,)\n","0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WRNt7YWXoAQB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"executionInfo":{"status":"ok","timestamp":1590587182956,"user_tz":240,"elapsed":407,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"dae5a3a9-bdd2-4b7b-c97f-b19aec710f15"},"source":["from sklearn.linear_model import LogisticRegression\n","regr2 = LogisticRegression(solver='lbfgs' ,fit_intercept=True)\n","\n","regr2.fit(x3_train, y3_train)\n","print(\"Test accuracy:\")\n","print(regr2.score(x3_test,y3_test))\n","print(\"Vector with coefficient values for theta_1, theta_2\")\n","print(\"theta_0:\",regr2.intercept_[0],\"theta_1, theta_2: = \",regr2.coef_[0])\n","\n","\n","print(\"Mean prediction accuracy is: \",regr2.score(X3,y3))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Test accuracy:\n","0.8662420382165605\n","Vector with coefficient values for theta_1, theta_2\n","theta_0: -3.199809001429928 theta_1, theta_2: =  [0.00827801 0.00551654]\n","Mean prediction accuracy is:  0.9276568501920615\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"i24zvMCLKqIV","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":419},"executionInfo":{"status":"ok","timestamp":1590587423491,"user_tz":240,"elapsed":336,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"f177b527-9d95-4dba-ef38-ef5363bbe7d4"},"source":["#trying out a classification decision tree, dropped from presentation*************\n","weather.head()\n","w = weather\n","w = w.drop(['home_team','home_score',\t'away_team','away_score',\t'winner',\t'score','team', 'date','winning score'],1)\n","w = w.dropna()\n","w"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>temperature</th>\n","      <th>wind_chill</th>\n","      <th>humidity</th>\n","      <th>wind_mph</th>\n","      <th>above 40</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>37</th>\n","      <td>34</td>\n","      <td>25.0</td>\n","      <td>91</td>\n","      <td>13.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>36</td>\n","      <td>29.0</td>\n","      <td>55</td>\n","      <td>10.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>24</td>\n","      <td>12.0</td>\n","      <td>76</td>\n","      <td>15.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>69</th>\n","      <td>28</td>\n","      <td>18.0</td>\n","      <td>76</td>\n","      <td>12.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>71</th>\n","      <td>21</td>\n","      <td>6.0</td>\n","      <td>62</td>\n","      <td>16.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>11179</th>\n","      <td>26</td>\n","      <td>14.0</td>\n","      <td>88</td>\n","      <td>16.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11181</th>\n","      <td>73</td>\n","      <td>0.0</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11183</th>\n","      <td>40</td>\n","      <td>0.0</td>\n","      <td>100</td>\n","      <td>2.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11190</th>\n","      <td>70</td>\n","      <td>0.0</td>\n","      <td>16</td>\n","      <td>8.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11191</th>\n","      <td>79</td>\n","      <td>0.0</td>\n","      <td>84</td>\n","      <td>12.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1562 rows × 5 columns</p>\n","</div>"],"text/plain":["       temperature  wind_chill  humidity  wind_mph above 40\n","37              34        25.0        91      13.0        0\n","54              36        29.0        55      10.0        0\n","67              24        12.0        76      15.0        1\n","69              28        18.0        76      12.0        0\n","71              21         6.0        62      16.0        0\n","...            ...         ...       ...       ...      ...\n","11179           26        14.0        88      16.0        0\n","11181           73         0.0        14       1.0        0\n","11183           40         0.0       100       2.0        0\n","11190           70         0.0        16       8.0        0\n","11191           79         0.0        84      12.0        0\n","\n","[1562 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":121}]},{"cell_type":"code","metadata":{"id":"KIUfofq3PwCj","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1590587425628,"user_tz":240,"elapsed":391,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"de49e20b-75e7-41d4-f616-78bba06630db"},"source":["0.8*len(w)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1249.6000000000001"]},"metadata":{"tags":[]},"execution_count":122}]},{"cell_type":"code","metadata":{"id":"IPBCE5ePMNYQ","colab_type":"code","colab":{}},"source":["w_training = w.iloc[0:1249]\n","X2_train = w_training.drop('above 40',1)\n","y2_train = w_training['above 40']\n","\n","w_testing = w.iloc[1249:]\n","\n","X2_test = w_testing.drop('above 40',1)\n","y2_test = w_testing['above 40']\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gcPVTcc-NoNe","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":629},"executionInfo":{"status":"ok","timestamp":1590587427403,"user_tz":240,"elapsed":286,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"972152af-0daf-4563-cb39-02365d8a41c9"},"source":["model = LogisticRegression(fit_intercept=False)\n","model.fit(X2_train, y2_train)\n","\n","model_predict = np.array(model.predict(X2_test))\n","array_predict = np.array(y2_test)\n","\n","print('Predictions:', model_predict)\n","print('Actual:     ', array_predict)\n","\n","matches = model_predict == array_predict"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Predictions: ['0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0']\n","Actual:      ['0' '0' '0' '0' '0' '0' '0' '1' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '1' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1'\n"," '1' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '1' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '1' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1' '1' '0'\n"," '0' '1' '0' '0' '0' '1' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1'\n"," '0' '1' '0' '1' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '1' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '1' '0' '0' '0' '1' '1' '1' '0' '0' '0' '0' '0' '1' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '1' '0' '0' '0' '0' '0' '0' '0' '1' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1' '1' '1' '0' '0'\n"," '1' '0' '0' '0' '0' '0' '0' '0' '0' '1' '0' '1' '0' '0' '0' '0' '0' '1'\n"," '0' '1' '0' '0' '0' '0' '0']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uvkvDMCOQIND","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1590587430001,"user_tz":240,"elapsed":434,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"7d3eca7a-78b9-4b57-f1e9-77513c3e05c7"},"source":["hits = matches.sum()\n","total = len(matches)\n","acc = hits/total*100.0\n","print(\"Accuracy: \" + str(acc) + \"%\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy: 89.1373801916933%\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qjg8t4s5QwJZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":629},"executionInfo":{"status":"ok","timestamp":1590587441477,"user_tz":240,"elapsed":380,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"27496a7b-a614-4b45-8dd6-f35f38db152a"},"source":["#trying out a decision tree\n","from sklearn.tree import DecisionTreeClassifier, export_graphviz\n","\n","dtree = DecisionTreeClassifier(max_leaf_nodes=10)\n","\n","dtree.fit(X2_train, y2_train)\n","\n","treepredict = np.array(dtree.predict(X2_test))\n","arraypredict = np.array(y2_test)\n","\n","print('Predictions:', treepredict)\n","print('Actual:     ', array_predict)\n","\n","total_matches = treepredict == array_predict"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Predictions: ['0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0']\n","Actual:      ['0' '0' '0' '0' '0' '0' '0' '1' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '1' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1'\n"," '1' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '1' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '1' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1' '1' '0'\n"," '0' '1' '0' '0' '0' '1' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1'\n"," '0' '1' '0' '1' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '1' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0'\n"," '0' '0' '1' '0' '0' '0' '1' '1' '1' '0' '0' '0' '0' '0' '1' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '1' '0' '0' '0' '0' '0' '0' '0' '1' '0' '0' '0'\n"," '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '0' '1' '1' '1' '0' '0'\n"," '1' '0' '0' '0' '0' '0' '0' '0' '0' '1' '0' '1' '0' '0' '0' '0' '0' '1'\n"," '0' '1' '0' '0' '0' '0' '0']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4a9_gsbqRGmv","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":936},"executionInfo":{"status":"ok","timestamp":1590587443777,"user_tz":240,"elapsed":632,"user":{"displayName":"Aditi Mahabal","photoUrl":"","userId":"12540496752278893470"}},"outputId":"759b0a5d-aed7-46d4-cedc-bb551049c210"},"source":["from IPython.display import SVG\n","from graphviz import Source\n","from IPython.display import display\n","labels = X2_test.columns\n","graph = Source(export_graphviz(dtree, out_file=None\n","   , feature_names=labels, class_names=['Below 40', 'Above 40']\n","   , filled = True))\n","display(SVG(graph.pipe(format='svg')))"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.SVG object>"],"image/svg+xml":"<svg height=\"671pt\" viewBox=\"0.00 0.00 891.00 671.00\" width=\"891pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g class=\"graph\" id=\"graph0\" transform=\"scale(1 1) rotate(0) translate(4 667)\">\n<title>Tree</title>\n<polygon fill=\"#ffffff\" points=\"-4,4 -4,-667 887,-667 887,4 -4,4\" stroke=\"transparent\"/>\n<!-- 0 -->\n<g class=\"node\" id=\"node1\">\n<title>0</title>\n<polygon fill=\"#e78a46\" points=\"336,-663 210,-663 210,-580 336,-580 336,-663\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"273\" y=\"-647.8\">temperature &lt;= 1.5</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"273\" y=\"-632.8\">gini = 0.118</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"273\" y=\"-617.8\">samples = 1249</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"273\" y=\"-602.8\">value = [1170, 79]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"273\" y=\"-587.8\">class = Below 40</text>\n</g>\n<!-- 1 -->\n<g class=\"node\" id=\"node2\">\n<title>1</title>\n<polygon fill=\"#f2c09c\" points=\"261,-544 139,-544 139,-461 261,-461 261,-544\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"200\" y=\"-528.8\">wind_mph &lt;= 8.5</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"200\" y=\"-513.8\">gini = 0.444</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"200\" y=\"-498.8\">samples = 6</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"200\" y=\"-483.8\">value = [4, 2]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"200\" y=\"-468.8\">class = Below 40</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g class=\"edge\" id=\"edge1\">\n<title>0-&gt;1</title>\n<path d=\"M247.4681,-579.8796C242.109,-571.1434 236.4021,-561.8404 230.8718,-552.8253\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"233.8533,-550.9919 225.6408,-544.2981 227.8865,-554.6522 233.8533,-550.9919\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"219.8161\" y=\"-564.9101\">True</text>\n</g>\n<!-- 2 -->\n<g class=\"node\" id=\"node7\">\n<title>2</title>\n<polygon fill=\"#e78946\" points=\"413,-544 279,-544 279,-461 413,-461 413,-544\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"346\" y=\"-528.8\">temperature &lt;= 15.5</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"346\" y=\"-513.8\">gini = 0.116</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"346\" y=\"-498.8\">samples = 1243</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"346\" y=\"-483.8\">value = [1166, 77]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"346\" y=\"-468.8\">class = Below 40</text>\n</g>\n<!-- 0&#45;&gt;2 -->\n<g class=\"edge\" id=\"edge6\">\n<title>0-&gt;2</title>\n<path d=\"M298.5319,-579.8796C303.891,-571.1434 309.5979,-561.8404 315.1282,-552.8253\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"318.1135,-554.6522 320.3592,-544.2981 312.1467,-550.9919 318.1135,-554.6522\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"326.1839\" y=\"-564.9101\">False</text>\n</g>\n<!-- 3 -->\n<g class=\"node\" id=\"node3\">\n<title>3</title>\n<polygon fill=\"#399de5\" points=\"116,-417.5 0,-417.5 0,-349.5 116,-349.5 116,-417.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"58\" y=\"-402.3\">gini = 0.0</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"58\" y=\"-387.3\">samples = 1</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"58\" y=\"-372.3\">value = [0, 1]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"58\" y=\"-357.3\">class = Above 40</text>\n</g>\n<!-- 1&#45;&gt;3 -->\n<g class=\"edge\" id=\"edge2\">\n<title>1-&gt;3</title>\n<path d=\"M150.3353,-460.8796C136.1642,-449.0038 120.743,-436.0804 106.6342,-424.2568\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"108.8598,-421.5554 98.9472,-417.8149 104.3637,-426.9206 108.8598,-421.5554\" stroke=\"#000000\"/>\n</g>\n<!-- 4 -->\n<g class=\"node\" id=\"node4\">\n<title>4</title>\n<polygon fill=\"#eca06a\" points=\"267.5,-425 134.5,-425 134.5,-342 267.5,-342 267.5,-425\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"201\" y=\"-409.8\">wind_chill &lt;= -18.0</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"201\" y=\"-394.8\">gini = 0.32</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"201\" y=\"-379.8\">samples = 5</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"201\" y=\"-364.8\">value = [4, 1]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"201\" y=\"-349.8\">class = Below 40</text>\n</g>\n<!-- 1&#45;&gt;4 -->\n<g class=\"edge\" id=\"edge3\">\n<title>1-&gt;4</title>\n<path d=\"M200.3498,-460.8796C200.4186,-452.6838 200.4917,-443.9891 200.563,-435.5013\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"204.0645,-435.3272 200.6488,-425.2981 197.0648,-435.2683 204.0645,-435.3272\" stroke=\"#000000\"/>\n</g>\n<!-- 5 -->\n<g class=\"node\" id=\"node5\">\n<title>5</title>\n<polygon fill=\"#399de5\" points=\"193,-298.5 77,-298.5 77,-230.5 193,-230.5 193,-298.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"135\" y=\"-283.3\">gini = 0.0</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"135\" y=\"-268.3\">samples = 1</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"135\" y=\"-253.3\">value = [0, 1]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"135\" y=\"-238.3\">class = Above 40</text>\n</g>\n<!-- 4&#45;&gt;5 -->\n<g class=\"edge\" id=\"edge4\">\n<title>4-&gt;5</title>\n<path d=\"M177.9164,-341.8796C171.7567,-330.7735 165.0889,-318.7513 158.8871,-307.5691\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"161.9428,-305.8624 154.0318,-298.8149 155.8213,-309.2576 161.9428,-305.8624\" stroke=\"#000000\"/>\n</g>\n<!-- 6 -->\n<g class=\"node\" id=\"node6\">\n<title>6</title>\n<polygon fill=\"#e58139\" points=\"326.5,-298.5 211.5,-298.5 211.5,-230.5 326.5,-230.5 326.5,-298.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"269\" y=\"-283.3\">gini = 0.0</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"269\" y=\"-268.3\">samples = 4</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"269\" y=\"-253.3\">value = [4, 0]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"269\" y=\"-238.3\">class = Below 40</text>\n</g>\n<!-- 4&#45;&gt;6 -->\n<g class=\"edge\" id=\"edge5\">\n<title>4-&gt;6</title>\n<path d=\"M224.7831,-341.8796C231.1294,-330.7735 237.9993,-318.7513 244.3891,-307.5691\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"247.4689,-309.2339 249.3915,-298.8149 241.3912,-305.7609 247.4689,-309.2339\" stroke=\"#000000\"/>\n</g>\n<!-- 7 -->\n<g class=\"node\" id=\"node8\">\n<title>7</title>\n<polygon fill=\"#e58139\" points=\"402.5,-417.5 287.5,-417.5 287.5,-349.5 402.5,-349.5 402.5,-417.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"345\" y=\"-402.3\">gini = 0.0</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"345\" y=\"-387.3\">samples = 63</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"345\" y=\"-372.3\">value = [63, 0]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"345\" y=\"-357.3\">class = Below 40</text>\n</g>\n<!-- 2&#45;&gt;7 -->\n<g class=\"edge\" id=\"edge7\">\n<title>2-&gt;7</title>\n<path d=\"M345.6502,-460.8796C345.5606,-450.2134 345.4639,-438.7021 345.3731,-427.9015\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"348.8724,-427.7851 345.2884,-417.8149 341.8726,-427.844 348.8724,-427.7851\" stroke=\"#000000\"/>\n</g>\n<!-- 8 -->\n<g class=\"node\" id=\"node9\">\n<title>8</title>\n<polygon fill=\"#e78a47\" points=\"545.5,-425 420.5,-425 420.5,-342 545.5,-342 545.5,-425\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"483\" y=\"-409.8\">wind_chill &lt;= -0.5</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"483\" y=\"-394.8\">gini = 0.122</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"483\" y=\"-379.8\">samples = 1180</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"483\" y=\"-364.8\">value = [1103, 77]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"483\" y=\"-349.8\">class = Below 40</text>\n</g>\n<!-- 2&#45;&gt;8 -->\n<g class=\"edge\" id=\"edge8\">\n<title>2-&gt;8</title>\n<path d=\"M393.916,-460.8796C404.6993,-451.513 416.2329,-441.4948 427.3039,-431.8784\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"429.6251,-434.4982 434.8795,-425.2981 425.0347,-429.2134 429.6251,-434.4982\" stroke=\"#000000\"/>\n</g>\n<!-- 9 -->\n<g class=\"node\" id=\"node10\">\n<title>9</title>\n<polygon fill=\"#ffffff\" points=\"468.5,-306 349.5,-306 349.5,-223 468.5,-223 468.5,-306\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"409\" y=\"-290.8\">humidity &lt;= 77.5</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"409\" y=\"-275.8\">gini = 0.5</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"409\" y=\"-260.8\">samples = 2</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"409\" y=\"-245.8\">value = [1, 1]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"409\" y=\"-230.8\">class = Below 40</text>\n</g>\n<!-- 8&#45;&gt;9 -->\n<g class=\"edge\" id=\"edge9\">\n<title>8-&gt;9</title>\n<path d=\"M457.1184,-341.8796C451.6858,-333.1434 445.9008,-323.8404 440.2947,-314.8253\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"443.2451,-312.9418 434.9921,-306.2981 437.3007,-316.6383 443.2451,-312.9418\" stroke=\"#000000\"/>\n</g>\n<!-- 10 -->\n<g class=\"node\" id=\"node13\">\n<title>10</title>\n<polygon fill=\"#e78a47\" points=\"611,-306 487,-306 487,-223 611,-223 611,-306\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"549\" y=\"-290.8\">humidity &lt;= 99.0</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"549\" y=\"-275.8\">gini = 0.121</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"549\" y=\"-260.8\">samples = 1178</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"549\" y=\"-245.8\">value = [1102, 76]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"549\" y=\"-230.8\">class = Below 40</text>\n</g>\n<!-- 8&#45;&gt;10 -->\n<g class=\"edge\" id=\"edge12\">\n<title>8-&gt;10</title>\n<path d=\"M506.0836,-341.8796C510.8789,-333.2335 515.9822,-324.0322 520.9338,-315.1042\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"524.0284,-316.7407 525.8179,-306.2981 517.9069,-313.3455 524.0284,-316.7407\" stroke=\"#000000\"/>\n</g>\n<!-- 11 -->\n<g class=\"node\" id=\"node11\">\n<title>11</title>\n<polygon fill=\"#e58139\" points=\"333.5,-179.5 218.5,-179.5 218.5,-111.5 333.5,-111.5 333.5,-179.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"276\" y=\"-164.3\">gini = 0.0</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"276\" y=\"-149.3\">samples = 1</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"276\" y=\"-134.3\">value = [1, 0]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"276\" y=\"-119.3\">class = Below 40</text>\n</g>\n<!-- 9&#45;&gt;11 -->\n<g class=\"edge\" id=\"edge10\">\n<title>9-&gt;11</title>\n<path d=\"M362.4831,-222.8796C349.333,-211.1138 335.0337,-198.3197 321.9191,-186.5855\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"324.1382,-183.8746 314.352,-179.8149 319.4706,-189.0913 324.1382,-183.8746\" stroke=\"#000000\"/>\n</g>\n<!-- 12 -->\n<g class=\"node\" id=\"node12\">\n<title>12</title>\n<polygon fill=\"#399de5\" points=\"468,-179.5 352,-179.5 352,-111.5 468,-111.5 468,-179.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"410\" y=\"-164.3\">gini = 0.0</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"410\" y=\"-149.3\">samples = 1</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"410\" y=\"-134.3\">value = [0, 1]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"410\" y=\"-119.3\">class = Above 40</text>\n</g>\n<!-- 9&#45;&gt;12 -->\n<g class=\"edge\" id=\"edge11\">\n<title>9-&gt;12</title>\n<path d=\"M409.3498,-222.8796C409.4394,-212.2134 409.5361,-200.7021 409.6269,-189.9015\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"413.1274,-189.844 409.7116,-179.8149 406.1276,-189.7851 413.1274,-189.844\" stroke=\"#000000\"/>\n</g>\n<!-- 13 -->\n<g class=\"node\" id=\"node14\">\n<title>13</title>\n<polygon fill=\"#e78a46\" points=\"611,-187 487,-187 487,-104 611,-104 611,-187\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"549\" y=\"-171.8\">humidity &lt;= 42.5</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"549\" y=\"-156.8\">gini = 0.12</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"549\" y=\"-141.8\">samples = 1175</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"549\" y=\"-126.8\">value = [1100, 75]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"549\" y=\"-111.8\">class = Below 40</text>\n</g>\n<!-- 10&#45;&gt;13 -->\n<g class=\"edge\" id=\"edge13\">\n<title>10-&gt;13</title>\n<path d=\"M549,-222.8796C549,-214.6838 549,-205.9891 549,-197.5013\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"552.5001,-197.298 549,-187.2981 545.5001,-197.2981 552.5001,-197.298\" stroke=\"#000000\"/>\n</g>\n<!-- 14 -->\n<g class=\"node\" id=\"node17\">\n<title>14</title>\n<polygon fill=\"#f2c09c\" points=\"757,-187 629,-187 629,-104 757,-104 757,-187\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"693\" y=\"-171.8\">wind_chill &lt;= 28.0</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"693\" y=\"-156.8\">gini = 0.444</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"693\" y=\"-141.8\">samples = 3</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"693\" y=\"-126.8\">value = [2, 1]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"693\" y=\"-111.8\">class = Below 40</text>\n</g>\n<!-- 10&#45;&gt;14 -->\n<g class=\"edge\" id=\"edge16\">\n<title>10-&gt;14</title>\n<path d=\"M599.3642,-222.8796C610.6985,-213.513 622.8215,-203.4948 634.4581,-193.8784\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"636.9419,-196.3663 642.4208,-187.2981 632.4827,-190.9703 636.9419,-196.3663\" stroke=\"#000000\"/>\n</g>\n<!-- 17 -->\n<g class=\"node\" id=\"node15\">\n<title>17</title>\n<polygon fill=\"#e58139\" points=\"469.5,-68 354.5,-68 354.5,0 469.5,0 469.5,-68\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"412\" y=\"-52.8\">gini = 0.0</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"412\" y=\"-37.8\">samples = 40</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"412\" y=\"-22.8\">value = [40, 0]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"412\" y=\"-7.8\">class = Below 40</text>\n</g>\n<!-- 13&#45;&gt;17 -->\n<g class=\"edge\" id=\"edge14\">\n<title>13-&gt;17</title>\n<path d=\"M497.9863,-103.9815C486.242,-94.4232 473.7628,-84.2668 462.0595,-74.7419\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"464.065,-71.8614 454.0998,-68.2637 459.6464,-77.2906 464.065,-71.8614\" stroke=\"#000000\"/>\n</g>\n<!-- 18 -->\n<g class=\"node\" id=\"node16\">\n<title>18</title>\n<polygon fill=\"#e78a47\" points=\"612.5,-68 487.5,-68 487.5,0 612.5,0 612.5,-68\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"550\" y=\"-52.8\">gini = 0.123</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"550\" y=\"-37.8\">samples = 1135</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"550\" y=\"-22.8\">value = [1060, 75]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"550\" y=\"-7.8\">class = Below 40</text>\n</g>\n<!-- 13&#45;&gt;18 -->\n<g class=\"edge\" id=\"edge15\">\n<title>13-&gt;18</title>\n<path d=\"M549.3724,-103.9815C549.4474,-95.618 549.5265,-86.7965 549.6023,-78.3409\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"553.1028,-78.2947 549.6927,-68.2637 546.1031,-78.2318 553.1028,-78.2947\" stroke=\"#000000\"/>\n</g>\n<!-- 15 -->\n<g class=\"node\" id=\"node18\">\n<title>15</title>\n<polygon fill=\"#e58139\" points=\"748.5,-68 633.5,-68 633.5,0 748.5,0 748.5,-68\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"691\" y=\"-52.8\">gini = 0.0</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"691\" y=\"-37.8\">samples = 2</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"691\" y=\"-22.8\">value = [2, 0]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"691\" y=\"-7.8\">class = Below 40</text>\n</g>\n<!-- 14&#45;&gt;15 -->\n<g class=\"edge\" id=\"edge17\">\n<title>14-&gt;15</title>\n<path d=\"M692.2553,-103.9815C692.1053,-95.618 691.947,-86.7965 691.7954,-78.3409\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"695.2935,-78.1993 691.6146,-68.2637 688.2946,-78.3249 695.2935,-78.1993\" stroke=\"#000000\"/>\n</g>\n<!-- 16 -->\n<g class=\"node\" id=\"node19\">\n<title>16</title>\n<polygon fill=\"#399de5\" points=\"883,-68 767,-68 767,0 883,0 883,-68\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"825\" y=\"-52.8\">gini = 0.0</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"825\" y=\"-37.8\">samples = 1</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"825\" y=\"-22.8\">value = [0, 1]</text>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"825\" y=\"-7.8\">class = Above 40</text>\n</g>\n<!-- 14&#45;&gt;16 -->\n<g class=\"edge\" id=\"edge18\">\n<title>14-&gt;16</title>\n<path d=\"M742.1519,-103.9815C753.4676,-94.4232 765.4913,-84.2668 776.7675,-74.7419\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"779.0559,-77.3904 784.4367,-68.2637 774.5388,-72.0429 779.0559,-77.3904\" stroke=\"#000000\"/>\n</g>\n</g>\n</svg>"},"metadata":{"tags":[]}}]}]}